import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import stats
import scipy as scipy



returns = pd.DataFrame(np.random.normal(1.0, 0.03, (100, 10)))
prices = returns.cumprod()
prices.plot()
plt.title('Randomly-generated Prices')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend(loc=0);
#plt.show()

import quandl
import datetime

# We will look at stock prices over the past year, starting at January 1, 2016
start = datetime.datetime(2016, 1, 1)
end = datetime.date.today()

# Let's get Apple stock data; Apple's ticker symbol is AAPL
# First argument is the series we want, second is the source ("yahoo" for Yahoo! Finance), third is the start date, fourth is the end date
s = "AAPL"

apple = quandl.get("WIKI/" + s, start_date=start, end_date=end)

type(apple)
print(apple)

apple.plot()
# We still need to add the axis labels and title ourselves
plt.title(s + " Prices")
plt.ylabel("Price")
plt.xlabel("Date");
plt.show()


# We still need to add the axis labels and title ourselves
plt.title(s + " Prices")
plt.ylabel("Price")
plt.xlabel("Date");
apple["Adj. Close"].plot(grid=True)
plt.show()

slice_1 = apple["Adj. Close"]
print("Summary Statistics")
print(apple.describe())
add_returns = slice_1.diff()[1:]
mult_returns = slice_1.pct_change()[1:]

plt.title("Multiplicative returns of " + s)
plt.xlabel("Date")
plt.ylabel("Percent Returns")
mult_returns.plot();
plt.show()

df = pd.DataFrame(slice_1)
rolling_mean = df.rolling(30).mean()
rolling_mean.name = "30-day rolling mean"

rolling_mean.plot()
slice_1.plot()
plt.title(s + " Price")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend();
plt.show()

rolling_std = df.rolling(30).std()
rolling_std.name = "30-day rolling volatility"
rolling_std.plot()
plt.title(rolling_std.name);
plt.xlabel("Date")
plt.ylabel("Standard Deviation")
plt.show()

# Remove the first element because percent change from nothing to something is NaN
R = slice_1.pct_change()[1:]
print(R)

# Plot a histogram using 20 bins
plt.hist(R, bins=20)
plt.xlabel('Return')
plt.ylabel('Number of Days Observed')
plt.title('Frequency Distribution of AAPL Returns, 2016');
plt.show()

plt.hist(R, bins=20, cumulative=True)
plt.xlabel('Return')
plt.ylabel('Number of Days Observed')
plt.title('Cumulative Distribution of AAPL Returns, 2016');
plt.show()

# Geo mean and correcting for negative numbers

ratios = R + np.ones(len(R))
R_G = stats.gmean(ratios) - 1
print('Geometric mean of returns:', R_G)

X = np.sort(R)
print('X: %s' %R)

mu = np.mean(R)
print('Mean of X:', mu)

abs_dispersion = [np.abs(mu - X) for x in X]
MAD = np.sum(abs_dispersion)/len(abs_dispersion)
print(MAD)

k = 1.25
dist = k*np.std(R)
l = [x for x in X if abs(x - mu) <= dist]
print('Observations within', k, 'stds of mean:', l)
print('Confirming that', float(len(l))/len(X), '>', 1 - 1/k**2)

xs = np.linspace(-6,6, 300)
normal = scipy.stats.norm.pdf(xs)
plt.plot(xs, normal);
plt.show()

# Generate x-values for which we will plot the distribution
xs2 = np.linspace(scipy.stats.lognorm.ppf(0.01, .7, loc=-.1), scipy.stats.lognorm.ppf(0.99, .7, loc=-.1), 150)

# Negatively skewed distribution
lognormal = scipy. stats.lognorm.pdf(xs2, .7)
plt.plot(xs2, lognormal, label='Skew > 0')

# Positively skewed distribution
plt.plot(xs2, lognormal[::-1], label='Skew < 0')
plt.legend();
plt.show()

